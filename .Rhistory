ggplot(data = plot_all, aes(x=mp, y=Estimate, ymin=ci.low, ymax=ci.hi,col=PDR,fill=PDR)) +
#specify position here
#geom_linerange(linewidth=5, position=position_dodge(width = 0.5)) +
geom_hline(yintercept=0, lty=2) +
#specify position here too
geom_point(size=3, shape=21, colour="white", stroke = 0.5, position=position_dodge(width = -0.5)) +
geom_errorbar(aes(width=0.5), position=position_dodge(width = -0.5)) +
scale_fill_manual(values=pal)+
scale_color_manual(values=pal)+
scale_y_continuous(name="Estimate", limits = c(-5, 5)) +
labs(title='Effect Size by Sample') +
#scale_x_discrete(limits = c("Total", "Indirect 2 (Clozapine & Norclozapine)", "Indirect 1 (Clozapine Alone)", "Direct" )) +
#geom_text(aes(label = label), nudge_x = 0.15, show.legend = FALSE) +
coord_flip() +
theme(legend.position = "bottom") +
theme_minimal()
pm$mp <- 1
im$mp <- 2
rm$mp <- 3
um$mp <- 4
plot_all <- rbind(pm, im, rm, um)
plot_all$PDR <- gsub('pdr','',plot_all$PDR)
rownames(plot_all) <- NULL
ggplot(data = plot_all, aes(x=mp, y=Estimate, ymin=ci.low, ymax=ci.hi,col=PDR,fill=PDR)) +
#specify position here
#geom_linerange(linewidth=5, position=position_dodge(width = 0.5)) +
geom_hline(yintercept=0, lty=2) +
#specify position here too
geom_point(size=3, shape=21, colour="white", stroke = 0.5, position=position_dodge(width = -0.5)) +
geom_errorbar(aes(width=0.5), position=position_dodge(width = -0.5)) +
scale_fill_manual(values=pal)+
scale_color_manual(values=pal)+
scale_y_continuous(name="Estimate", limits = c(-5, 5)) +
labs(title='Effect Sizes of PGx Metabolism Phenotypes by PDR') +
#scale_x_discrete(limits = c("Total", "Indirect 2 (Clozapine & Norclozapine)", "Indirect 1 (Clozapine Alone)", "Direct" )) +
#geom_text(aes(label = label), nudge_x = 0.15, show.legend = FALSE) +
coord_flip() +
theme(legend.position = "bottom") +
theme_minimal()
pm$mp <- 1
im$mp <- 2
rm$mp <- 3
um$mp <- 4
plot_all <- rbind(pm, im, rm, um)
plot_all$PDR <- gsub('pdr','',plot_all$PDR)
rownames(plot_all) <- NULL
ggplot(data = plot_all, aes(x=mp, y=Estimate, ymin=ci.low, ymax=ci.hi,col=PDR,fill=PDR)) +
#specify position here
#geom_linerange(linewidth=5, position=position_dodge(width = 0.5)) +
geom_hline(yintercept=0, lty=2) +
#specify position here too
geom_point(size=3, shape=21, colour="white", stroke = 0.5, position=position_dodge(width = -0.5)) +
geom_errorbar(aes(width=0.5), position=position_dodge(width = -0.5)) +
scale_fill_manual(values=pal)+
scale_color_manual(values=pal)+
scale_y_continuous(name="Estimate", limits = c(-5, 5)) +
labs(title='Effect Sizes of PGx Metabolism Phenotypes by PDR') +
#scale_x_discrete(limits = c("Total", "Indirect 2 (Clozapine & Norclozapine)", "Indirect 1 (Clozapine Alone)", "Direct" )) +
#geom_text(aes(label = label), nudge_x = 0.15, show.legend = FALSE) +
coord_flip() +
theme(legend.position = "bottom") +
theme_minimal()
pm$mp <- 1
im$mp <- 2
rm$mp <- 3
um$mp <- 4
plot_all <- rbind(pm, im, rm, um)
plot_all$PDR <- gsub('pdr','',plot_all$PDR)
rownames(plot_all) <- NULL
ggplot(data = plot_all, aes(x=mp, y=Estimate, ymin=ci.low, ymax=ci.hi,col=PDR,fill=PDR)) +
#specify position here
#geom_linerange(linewidth=5, position=position_dodge(width = 0.5)) +
geom_hline(yintercept=0, lty=2) +
#specify position here too
geom_point(size=3, shape=21, colour="white", stroke = 0.5, position=position_dodge(width = -0.5)) +
geom_errorbar(aes(width=0.5), position=position_dodge(width = -0.5)) +
scale_fill_manual(values=pal)+
scale_color_manual(values=pal)+
scale_y_continuous(name="Estimate", limits = c(-5, 5)) +
labs(title='Effect Sizes of PGx Metabolism Phenotypes by PDR') +
scale_x_discrete(limits = c("Ultrarapid Metaboliser", "Rapid Metaboliser", "Intermediate Metaboliser", "Poor Metaboliser" )) +
#geom_text(aes(label = label), nudge_x = 0.15, show.legend = FALSE) +
coord_flip() +
theme(legend.position = "bottom") +
theme_minimal()
ggplot(data = plot_all, aes(x=mp, y=Estimate, ymin=ci.low, ymax=ci.hi,col=PDR,fill=PDR)) +
#specify position here
#geom_linerange(linewidth=5, position=position_dodge(width = 0.5)) +
geom_hline(yintercept=0, lty=2) +
#specify position here too
geom_point(size=3, shape=21, colour="white", stroke = 0.5, position=position_dodge(width = -0.5)) +
geom_errorbar(aes(width=0.5), position=position_dodge(width = -0.5)) +
scale_fill_manual(values=pal)+
scale_color_manual(values=pal)+
scale_y_continuous(name="Estimate", limits = c(-5, 5)) +
labs(title='Effect Sizes of PGx Metabolism Phenotypes by PDR') +
scale_x_discrete(limits = c("Ultrarapid Metaboliser", "Rapid Metaboliser", "Intermediate Metaboliser", "Poor Metaboliser" )) +
#geom_text(aes(label = label), nudge_x = 0.15, show.legend = FALSE) +
coord_flip() +
theme(legend.position = "bottom") +
theme_minimal()
ggplot(data = plot_all, aes(x=mp, y=Estimate, ymin=ci.low, ymax=ci.hi,col=PDR,fill=PDR)) +
#specify position here
#geom_linerange(linewidth=5, position=position_dodge(width = 0.5)) +
geom_hline(yintercept=0, lty=2) +
#specify position here too
geom_point(size=3, shape=21, colour="white", stroke = 0.5, position=position_dodge(width = -0.5)) +
geom_errorbar(aes(width=0.5), position=position_dodge(width = -0.5)) +
scale_fill_manual(values=pal)+
scale_color_manual(values=pal)+
scale_y_continuous(name="Estimate", limits = c(-5, 5)) +
labs(title='Effect Sizes of PGx Metabolism Phenotypes by PDR') +
scale_x_discrete(limits = c("Poor Metaboliser", "Intermediate Metaboliser", "Rapid Metaboliser", "Ultrarapid Metaboliser")) +
#geom_text(aes(label = label), nudge_x = 0.15, show.legend = FALSE) +
coord_flip() +
theme(legend.position = "bottom") +
theme_minimal()
ggplot(data = plot_all, aes(x=mp, y=Estimate, ymin=ci.low, ymax=ci.hi,col=PDR,fill=PDR)) +
#specify position here
#geom_linerange(linewidth=5, position=position_dodge(width = 0.5)) +
geom_hline(yintercept=0, lty=2) +
#specify position here too
geom_point(size=3, shape=21, colour="white", stroke = 0.5, position=position_dodge(width = -0.5)) +
geom_errorbar(aes(width=0.5), position=position_dodge(width = -0.5)) +
scale_fill_manual(values=pal)+
scale_color_manual(values=pal)+
scale_y_continuous(name="Estimate", limits = c(-3, 3)) +
labs(title='Effect Sizes of PGx Metabolism Phenotypes by PDR') +
scale_x_discrete(limits = c("Poor Metaboliser", "Intermediate Metaboliser", "Rapid Metaboliser", "Ultrarapid Metaboliser")) +
#geom_text(aes(label = label), nudge_x = 0.15, show.legend = FALSE) +
coord_flip() +
theme(legend.position = "bottom") +
theme_minimal()
ggplot(data = plot_all, aes(x=mp, y=Estimate, ymin=ci.low, ymax=ci.hi,col=PDR,fill=PDR)) +
#specify position here
#geom_linerange(linewidth=5, position=position_dodge(width = 0.5)) +
geom_hline(yintercept=0, lty=2) +
#specify position here too
geom_point(size=3, shape=21, colour="white", stroke = 0.5, position=position_dodge(width = -0.5)) +
geom_errorbar(aes(width=0.5), position=position_dodge(width = -0.5)) +
scale_fill_manual(values=pal)+
scale_color_manual(values=pal)+
scale_y_continuous(name="Estimate", limits = c(-3, 3)) +
labs(title='Effect Sizes of PGx Metabolism Phenotypes by PDR') +
scale_x_discrete(limits = c("Poor Metaboliser", "Intermediate Metaboliser", "Rapid Metaboliser", "Ultrarapid Metaboliser")) +
xlab("Metabolism Phenotype")+
#geom_text(aes(label = label), nudge_x = 0.15, show.legend = FALSE) +
coord_flip() +
theme(legend.position = "bottom") +
theme_minimal()
# constant sampling correlation assumption -  it is highly recommended to run several sensitivity analyses for varying values of ρ
rho_list <- seq.int(0, 0.95, by = .05)
results <- data.frame()
# test at different levels of correlation
for (i in 1:length(rho_list)){
V <- metafor::vcalc(vi = Var, cluster = Study, obs = es_id, rho = rho_list[i], data = test_ma)
# fit correlated and hierarchical effects model
che.model <- rma.mv(SMD ~ 1 + mp,
V = V,
random = ~ 1 | Study/es_id,
data = test_ma,
sparse = TRUE)
out <- as.data.frame(coef_test(che.model, vcov = "CR2"))
ci <- as.data.frame(conf_int(che.model, vcov = "CR2"))
out <- out[-1,]
out <- out[,-1]
ci <- ci[-1,]
ci <- ci[,-1]
ci <- dplyr::select(ci, c("CI_L", "CI_U"))
out <- cbind(out, ci)
out$sig <- makeStars(out$p_Satt)
out$p <- rho_list[i]
results <- rbind(results, out)
}
test_ma <- filter(all_smd, enzyme == "CYP2D6") %>% filter(pdr == 1) %>% drop_na(mp)
test_ma$study_id <- 1:(nrow(test_ma))
# add direction variable
test_ma <- test_ma %>%
mutate(direction = case_when(grepl(pattern = "metabolite", ignore.case = T, x = Analysis) ~ 1, TRUE ~ 0))
# constant sampling correlation assumption -  it is highly recommended to run several sensitivity analyses for varying values of ρ
rho_list <- seq.int(0, 0.95, by = .05)
results <- data.frame()
# test at different levels of correlation
for (i in 1:length(rho_list)){
V <- metafor::vcalc(vi = Var, cluster = Study, obs = es_id, rho = rho_list[i], data = test_ma)
# fit correlated and hierarchical effects model
che.model <- rma.mv(SMD ~ 1 + mp,
V = V,
random = ~ 1 | Study/es_id,
data = test_ma,
sparse = TRUE)
out <- as.data.frame(coef_test(che.model, vcov = "CR2"))
ci <- as.data.frame(conf_int(che.model, vcov = "CR2"))
out <- out[-1,]
out <- out[,-1]
ci <- ci[-1,]
ci <- ci[,-1]
ci <- dplyr::select(ci, c("CI_L", "CI_U"))
out <- cbind(out, ci)
out$sig <- makeStars(out$p_Satt)
out$p <- rho_list[i]
results <- rbind(results, out)
}
df <- rownames_to_column(results, var = "Phenotype")
df$Phenotype <- gsub('[[:digit:]]+', '', df$Phenotype)
df$Phenotype[df$Phenotype == "mpPM"] <- "Poor Metaboliser"
df$Phenotype[df$Phenotype == "mpUM"] <- "Ultrarapid Metaboliser"
pal <- c("#ECBEB4", "#519E8A")
ggplot(data=df, aes(x=p, y=beta, colour=Phenotype)) +
geom_point() +
geom_line(linewidth = 2) +
geom_ribbon(aes(ymin=CI_L, ymax=CI_U), linetype=0, alpha=0.1) +
scale_color_manual(values = pal) +
xlab("Assumed sampling correlation (ρ)") +
ylab("Effect Size") +
theme_minimal() +
theme(axis.title = element_text(colour = "#A2AEB3"),
axis.text.x = element_text(colour = "#A2AEB3", size = 6),
axis.text.y = element_text(colour = "#A2AEB3", size = 6),
axis.ticks = element_line(colour = "#A2AEB3"),
plot.title = element_text(colour = "#A2AEB3"))
results <- results %>% dplyr::select(c("beta", "SE", "p_Satt", "CI_L", "CI_U", "sig", "p"))
DT::datatable(results, filter = 'top',  options = list(
columnDefs = list(list(targets = c(1:8), searchable = FALSE))
)) %>% DT::formatRound(columns = c('Estimate', 'SE', 'pval'), digits = 3)
results
results <- results %>% dplyr::select(c("beta", "SE", "p_Satt", "CI_L", "CI_U", "sig", "p"))
DT::datatable(results, filter = 'top',  options = list(
columnDefs = list(list(targets = c(1:8), searchable = FALSE))
)) %>% DT::formatRound(columns = c('beta', 'SE', 'p_Satt', 'CI_L', 'CI_U'), digits = 3)
results <- results %>% dplyr::select(c("beta", "SE", "CI_L", "CI_U","p_Satt" "sig"))
# constant sampling correlation assumption -  it is highly recommended to run several sensitivity analyses for varying values of ρ
rho_list <- seq.int(0, 0.95, by = .05)
results <- data.frame()
# test at different levels of correlation
for (i in 1:length(rho_list)){
V <- metafor::vcalc(vi = Var, cluster = Study, obs = es_id, rho = rho_list[i], data = test_ma)
# fit correlated and hierarchical effects model
che.model <- rma.mv(SMD ~ 1 + mp,
V = V,
random = ~ 1 | Study/es_id,
data = test_ma,
sparse = TRUE)
out <- as.data.frame(coef_test(che.model, vcov = "CR2"))
ci <- as.data.frame(conf_int(che.model, vcov = "CR2"))
out <- out[-1,]
out <- out[,-1]
ci <- ci[-1,]
ci <- ci[,-1]
ci <- dplyr::select(ci, c("CI_L", "CI_U"))
out <- cbind(out, ci)
out$sig <- makeStars(out$p_Satt)
out$p <- rho_list[i]
results <- rbind(results, out)
}
df <- rownames_to_column(results, var = "Phenotype")
df$Phenotype <- gsub('[[:digit:]]+', '', df$Phenotype)
df$Phenotype[df$Phenotype == "mpPM"] <- "Poor Metaboliser"
df$Phenotype[df$Phenotype == "mpUM"] <- "Ultrarapid Metaboliser"
pal <- c("#ECBEB4", "#519E8A")
ggplot(data=df, aes(x=p, y=beta, colour=Phenotype)) +
geom_point() +
geom_line(linewidth = 2) +
geom_ribbon(aes(ymin=CI_L, ymax=CI_U), linetype=0, alpha=0.1) +
scale_color_manual(values = pal) +
xlab("Assumed sampling correlation (ρ)") +
ylab("Effect Size") +
theme_minimal() +
theme(axis.title = element_text(colour = "#A2AEB3"),
axis.text.x = element_text(colour = "#A2AEB3", size = 6),
axis.text.y = element_text(colour = "#A2AEB3", size = 6),
axis.ticks = element_line(colour = "#A2AEB3"),
plot.title = element_text(colour = "#A2AEB3"))
results <- results %>% dplyr::select(c("beta", "SE", "CI_L", "CI_U","p_Satt" "sig"))
results <- results %>% dplyr::select(c("beta", "SE", "CI_L", "CI_U","p_Satt", "sig"))
DT::datatable(results, filter = 'top',  options = list(
columnDefs = list(list(targets = c(1:8), searchable = FALSE))
)) %>% DT::formatRound(columns = c('beta', 'SE', 'p_Satt', 'CI_L', 'CI_U'), digits = 3)
# package wont work if no intercept, doesnt matter as we can still get all moderators
pal <- c("#476A6F", "#e4959a", "#519E8A", "#edeee2")
# rm(list = ls())
# devtools::install_github("daniel1noble/orchaRd", ref = "main", force = TRUE)
res2 <- orchaRd::mod_results(che.model.no, mod = "mp", group = "Study")
meta.res.1 <- orchaRd::mod_results(meta.1, mod = "mp", group = "Study")
invisible(orchaRd::orchard_plot(meta.res.1, mod = "mp", group = "Study", xlab = "Standardised mean difference", tree.order = c("PM", "IM", "RM", "UM"), k.pos = "right") +
scale_color_manual(values = pal) +
scale_fill_manual(values = pal))
a <- anova(meta.1, X=rbind(c(-1,1,0,0),c(-1,0,1,0), c(-1,0,0,1), c(0,-1,1,0), c(0,-1,0,1), c(0,0,-1,1) ))
invisible(orchaRd::orchard_plot(meta.res.1, mod = "mp", group = "Study", xlab = "Standardised mean difference", tree.order = c("PM", "IM", "RM", "UM"), k.pos = "right") +
scale_color_manual(values = pal) +
scale_fill_manual(values = pal))
meta.res.1 <- orchaRd::mod_results(meta.1, mod = "mp", group = "Study")
orchaRd::orchard_plot(meta.res.1, mod = "mp", group = "Study", xlab = "Standardised mean difference", tree.order = c("PM", "IM", "RM", "UM"), k.pos = "right") +
scale_color_manual(values = pal) +
scale_fill_manual(values = pal)
a <- anova(meta.1, X=rbind(c(-1,1,0,0),c(-1,0,1,0), c(-1,0,0,1), c(0,-1,1,0), c(0,-1,0,1), c(0,0,-1,1) ))
orchaRd::orchard_plot(meta.res.1, mod = "mp", group = "Study", xlab = "Standardised mean difference", tree.order = c("PM", "IM", "RM", "UM"), k.pos = "right", fill = pal)
orchaRd::orchard_plot(meta.res.1, mod = "mp", group = "Study", xlab = "Standardised mean difference", tree.order = c("PM", "IM", "RM", "UM"), k.pos = "right", fill = values(pal))
orchaRd::orchard_plot(meta.res.1, mod = "mp", group = "Study", xlab = "Standardised mean difference", tree.order = c("PM", "IM", "RM", "UM"), k.pos = "right", ) +
scale_color_manual(values = pal)
orchaRd::orchard_plot(meta.res.1, mod = "mp", group = "Study", xlab = "Standardised mean difference", tree.order = c("PM", "IM", "RM", "UM"), k.pos = "right", ) +
scale_fill_manual(values = pal)
orchaRd::orchard_plot(meta.res.1, mod = "mp", group = "Study", xlab = "Standardised mean difference", tree.order = c("PM", "IM", "RM", "UM"), k.pos = "right", ) +
scale_color_manual(values = pal) +
scale_fill_manual(values = pal)
knitr::opts_chunk$set(echo = FALSE)
library(tidyverse)
library(ggplot2)
library(metafor)
library(clubSandwich)
library(dmetar)
library(data.table)
library(ggplotify)
library(patchwork)
library(emmeans)
library(esc)
pacman::p_load(devtools, tidyverse, metafor, patchwork, R.rsp, orchaRd, emmeans,
ape, phytools, flextable)
makeStars <- function(x){
stars <- c("****", "***", "**", "*", "ns")
vec <- c(0, 0.0001, 0.001, 0.01, 0.05, 1)
i <- findInterval(x, vec)
stars[i]
}
load("all_smds.RData")
test_ma <- filter(all_smd, enzyme == "CYP2D6") %>% filter(pdr == 1) %>% drop_na(mp)
test_ma$study_id <- 1:(nrow(test_ma))
# add direction variable
test_ma <- test_ma %>%
mutate(direction = case_when(grepl(pattern = "metabolite", ignore.case = T, x = Analysis) ~ 1, TRUE ~ 0))
length(unique(test_ma$Study))
setDT(all_smd)[, study_id := .GRP, by = Study]
es_counts <- all_smd %>% count(study_id)
ggplot(es_counts, aes(x = n)) +
geom_histogram(binwidth = 1) +
labs(title = "Effect sizes per Study") +
xlab("Number of Effect Sizes") +
ylab("Count") +
theme_minimal() +
theme(axis.title = element_text(colour = "#A2AEB3"),
axis.text.x = element_text(colour = "#A2AEB3", size = 6),
axis.text.y = element_text(colour = "#A2AEB3", size = 6),
axis.ticks = element_line(colour = "#A2AEB3"),
plot.title = element_text(colour = "#A2AEB3"))
ggplot(es_counts, aes(x = n)) +
geom_histogram(binwidth = 1) +
labs(title = "Effect sizes per Study") +
xlab("Number of Effect Sizes") +
ylab("Count") +
theme_minimal() +
theme(axis.title = element_text(colour = "#A2AEB3"),
axis.text.x = element_text(colour = "#A2AEB3", size = 6),
axis.text.y = element_text(colour = "#A2AEB3", size = 6),
axis.ticks = element_line(colour = "#A2AEB3"),
plot.title = element_text(colour = "#A2AEB3"))
ggplot(data = all_smd) +
geom_point(mapping = aes(x=study_id, y = Var)) +
labs(title = "Variance dependency within Studies") +
xlab("Study ID") +
ylab("Variance") +
ylim(0, 4) +
theme_minimal() +
theme(axis.title = element_text(colour = "#A2AEB3"),
axis.text.x = element_text(colour = "#A2AEB3", size = 6),
axis.text.y = element_text(colour = "#A2AEB3", size = 6),
axis.ticks = element_line(colour = "#A2AEB3"),
plot.title = element_text(colour = "#A2AEB3"))
ggplot(data = all_smd) +
geom_point(mapping = aes(x=study_id, y = Var)) +
labs(title = "Variance dependency within Studies") +
xlab("Study ID") +
ylab("Variance") +
ylim(0, 4) +
theme_minimal() +
theme(axis.title = element_text(colour = "#A2AEB3"),
axis.text.x = element_text(colour = "#A2AEB3", size = 6),
axis.text.y = element_text(colour = "#A2AEB3", size = 6),
axis.ticks = element_line(colour = "#A2AEB3"),
plot.title = element_text(colour = "#A2AEB3"))
ggplot(data = all_smd) +
geom_point(mapping = aes(x=study_id, y = Var)) +
labs(title = "Variance dependency within Studies") +
xlab("Study ID") +
ylab("Variance") +
#ylim(0, 4) +
theme_minimal() +
theme(axis.title = element_text(colour = "#A2AEB3"),
axis.text.x = element_text(colour = "#A2AEB3", size = 6),
axis.text.y = element_text(colour = "#A2AEB3", size = 6),
axis.ticks = element_line(colour = "#A2AEB3"),
plot.title = element_text(colour = "#A2AEB3"))
ggplot(data = all_smd) +
geom_point(mapping = aes(x=study_id, y = Var)) +
labs(title = "Variance dependency within Studies") +
xlab("Study ID") +
ylab("Variance") +
# ylim(0, 4) +
theme_minimal() +
theme(axis.title = element_text(colour = "#A2AEB3"),
axis.text.x = element_text(colour = "#A2AEB3", size = 6),
axis.text.y = element_text(colour = "#A2AEB3", size = 6),
axis.ticks = element_line(colour = "#A2AEB3"),
plot.title = element_text(colour = "#A2AEB3"))
install.packages("googlesheets4")
install.packages("googlesheets4")
#install.packages("pak")
pak::pak("tidyverse/googlesheets4")
install.packages("pak")
pak::pak("tidyverse/googlesheets4")
dat <- read_sheet("https://docs.google.com/spreadsheets/d/1PMq5uXQ4matv8rvERxLlRF4BR6VBzMC464JIGATqYlg/edit?gid=0#gid=0")
library(googlesheets4)
dat <- read_sheet("https://docs.google.com/spreadsheets/d/1PMq5uXQ4matv8rvERxLlRF4BR6VBzMC464JIGATqYlg/edit?gid=0#gid=0")
dat <- read_sheet("https://docs.google.com/spreadsheets/d/1PMq5uXQ4matv8rvERxLlRF4BR6VBzMC464JIGATqYlg/edit?gid=0#gid=0")
gs_deauth()
gs_auth()
googlesheets4::gs4_deauth()
googlesheets4::gs4_auth()
dat <- read_sheet("https://docs.google.com/spreadsheets/d/1PMq5uXQ4matv8rvERxLlRF4BR6VBzMC464JIGATqYlg/edit?gid=0#gid=0")
googlesheets4::gs4_deauth()
googlesheets4::gs4_auth()
dat <- read_sheet("https://docs.google.com/spreadsheets/d/1PMq5uXQ4matv8rvERxLlRF4BR6VBzMC464JIGATqYlg/edit?gid=0#gid=0")
View(dat)
dat <- read_sheet("https://docs.google.com/spreadsheets/d/1PMq5uXQ4matv8rvERxLlRF4BR6VBzMC464JIGATqYlg/edit?gid=0#gid=0")
dat <- read_sheet("https://docs.google.com/spreadsheets/d/1PMq5uXQ4matv8rvERxLlRF4BR6VBzMC464JIGATqYlg/edit?gid=0#gid=0")
main <- read_sheet("https://docs.google.com/spreadsheets/d/1PMq5uXQ4matv8rvERxLlRF4BR6VBzMC464JIGATqYlg/edit?gid=0#gid=0")
unique(main$Cost)
library(shiny); runApp('D:/siobh/Documents/Uni/PhD/Misc/wednesday/simple.R')
runApp('D:/siobh/Documents/Uni/PhD/Misc/wednesday/simple.R')
runApp('D:/siobh/Documents/Uni/PhD/Misc/wednesday/simple.R')
runApp('D:/siobh/Documents/Uni/PhD/Misc/wednesday/simple.R')
runApp('D:/siobh/Documents/Uni/PhD/Misc/wednesday/simple.R')
a <- sample_n(dat, 1)[1:3]
b <- sample_n(dat, 1)[1:3]
c <- sample_n(dat, 1)[1:3]
View(a)
matrix(a,b,c)
View(a)
t(a)
runApp('D:/siobh/Documents/Uni/PhD/Misc/wednesday/simple.R')
runApp('D:/siobh/Documents/Uni/PhD/Misc/wednesday/simple.R')
runApp('D:/siobh/Documents/Uni/PhD/Misc/wednesday/simple.R')
runApp('D:/siobh/Documents/Uni/PhD/Misc/wednesday/simple.R')
runApp('D:/siobh/Documents/Uni/PhD/Misc/wednesday/simple.R')
runApp('D:/siobh/Documents/Uni/PhD/Misc/wednesday/simple.R')
runApp('D:/siobh/Documents/Uni/PhD/Misc/wednesday/simple.R')
main <- read_sheet("https://docs.google.com/spreadsheets/d/1PMq5uXQ4matv8rvERxLlRF4BR6VBzMC464JIGATqYlg/edit?gid=0#gid=0")
library(shiny)
library(bslib)
library(tidyverse)
library(ggplot2)
library(googlesheets4)
library(shinyWidgets)
# load data
#setwd(dir = "D:/siobh/Documents/Uni/PhD/Misc/wednesday/")
#dat <- readxl::read_xlsx(path = "data.xlsx")
main <- read_sheet("https://docs.google.com/spreadsheets/d/1PMq5uXQ4matv8rvERxLlRF4BR6VBzMC464JIGATqYlg/edit?gid=0#gid=0")
main[1]
main[4]
col <- runif(n=1, min=1, max=3)
col <- sample(n=1, min=1, max=3)
col <- sample(1:3, 1)
main[col]
runApp('D:/siobh/Documents/Uni/PhD/Misc/wednesday/simple.R')
runApp('D:/siobh/Documents/Uni/PhD/Misc/wednesday/simple.R')
runApp('D:/siobh/Documents/Uni/PhD/Misc/wednesday/simple.R')
runApp('D:/siobh/Documents/Uni/PhD/Misc/wednesday/simple.R')
main <- read_sheet("https://docs.google.com/spreadsheets/d/1PMq5uXQ4matv8rvERxLlRF4BR6VBzMC464JIGATqYlg/edit?gid=0#gid=0")
now <- weekdays(Sys.Date())
main <- main %>% filter(!grepl(now, Closed))
main$Endorsed[!is.na(main$Endorsed)] <- "Yes"
main$Endorsed[is.na(main$Endorsed)] <- "No"
main <- read_sheet("https://docs.google.com/spreadsheets/d/1PMq5uXQ4matv8rvERxLlRF4BR6VBzMC464JIGATqYlg/edit?gid=0#gid=0")
now <- weekdays(Sys.Date())
main <- main %>% filter(!grepl(now, Closed))
main$Endorsed[!is.na(main$Endorsed)] <- "Yes"
main$Endorsed[is.na(main$Endorsed)] <- "No"
runApp('D:/siobh/Documents/Uni/PhD/Misc/wednesday/simple.R')
runApp('D:/siobh/Documents/Uni/PhD/Misc/wednesday/simple.R')
runApp('simple.R')
q
runApp('D:/siobh/Documents/Uni/PhD/Misc/wednesday/simple.R')
runApp('simple.R')
runApp('D:/siobh/Documents/Uni/PhD/Misc/wednesday/simple.R')
runApp('D:/siobh/Documents/Uni/PhD/Misc/wednesday/simple.R')
runApp('D:/siobh/Documents/Uni/PhD/Misc/wednesday/simple.R')
runApp('D:/siobh/Documents/Uni/PhD/Misc/wednesday/simple.R')
test <- main[5]
test <- main[5,]
View(test)
random_dat <- data.frame(Choice_1 = t(sample_n(main, 1)[1:3]),
Choice_2 = t(sample_n(main, 1)[1:3]),
Choice_3 = t(sample_n(main, 1)[1:3]))
colnames(random_dat) <- c("Choice 1", "Choice 2", "Choice 3")
View(random_dat)
random_dat[1]
random_dat[1,1]
col <- sample(1:3, 1)
random_dat_col <- random_dat[col]
random_dat_col[1]
random_dat_col[,1]
random_dat_col[1,]
runApp('D:/siobh/Documents/Uni/PhD/Misc/wednesday/simple.R')
runApp('simple.R')
runApp('D:/siobh/Documents/Uni/PhD/Misc/wednesday/simple.R')
runApp('D:/siobh/Documents/Uni/PhD/Misc/wednesday/simple.R')
runApp('D:/siobh/Documents/Uni/PhD/Misc/wednesday/simple.R')
runApp('D:/siobh/Documents/Uni/PhD/Misc/wednesday/simple.R')
runApp('D:/siobh/Documents/Uni/PhD/Misc/wednesday/simple.R')
library(shiny); runApp('D:/siobh/Documents/Uni/PhD/Misc/wednesday/simple.R')
library(shiny); runApp('simple.R')
runApp('simple.R')
runApp('simple.R')
